Describe datetime
  Before each
    new
    let b:flap = {
    \  'rules': [],
    \}
    nmap <buffer> <C-A> <Plug>(flap-inc)
    nmap <buffer> <C-X> <Plug>(flap-dec)
    only!
  End

  It increments/decrements '%a, %d %b %Y %H:%M:%S %z'
    let b:flap.rules += [flap#datetime#rule('%a, %d %b %Y %H:%M:%S %z')]
    call setline(1, 'Mon, 02 Jan 2006 15:04:05 -0700')

    call cursor(1, 1)
    execute "normal 9\<C-A>"
    Assert Equals(getline(1), 'Wed, 11 Jan 2006 15:04:05 -0700')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 31, 0])
    execute "normal 11\<C-X>"
    Assert Equals(getline(1), 'Sat, 31 Dec 2005 15:04:05 -0700')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 31, 0])

    call cursor(1, 6)
    execute "normal 32\<C-A>"
    Assert Equals(getline(1), 'Wed, 01 Feb 2006 15:04:05 -0700')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 31, 0])
    execute "normal 30\<C-X>"
    Assert Equals(getline(1), 'Mon, 02 Jan 2006 15:04:05 -0700')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 31, 0])

    call cursor(1, 9)
    execute "normal 13\<C-A>"
    Assert Equals(getline(1), 'Fri, 02 Feb 2007 15:04:05 -0700')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 31, 0])
    execute "normal 25\<C-X>"
    Assert Equals(getline(1), 'Sun, 02 Jan 2005 15:04:05 -0700')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 31, 0])

    call cursor(1, 13)
    execute "normal 5\<C-A>"
    Assert Equals(getline(1), 'Sat, 02 Jan 2010 15:04:05 -0700')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 31, 0])
    execute "normal 4\<C-X>"
    Assert Equals(getline(1), 'Mon, 02 Jan 2006 15:04:05 -0700')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 31, 0])

    call cursor(1, 18)
    execute "normal 9\<C-A>"
    Assert Equals(getline(1), 'Tue, 03 Jan 2006 00:04:05 -0700')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 31, 0])
    execute "normal 10\<C-X>"
    Assert Equals(getline(1), 'Mon, 02 Jan 2006 14:04:05 -0700')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 31, 0])

    call cursor(1, 21)
    execute "normal 70\<C-A>"
    Assert Equals(getline(1), 'Mon, 02 Jan 2006 15:14:05 -0700')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 31, 0])
    execute "normal 17\<C-X>"
    Assert Equals(getline(1), 'Mon, 02 Jan 2006 14:57:05 -0700')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 31, 0])

    call cursor(1, 24)
    execute "normal 490\<C-A>"
    Assert Equals(getline(1), 'Mon, 02 Jan 2006 15:05:15 -0700')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 31, 0])
    execute "normal 70\<C-X>"
    Assert Equals(getline(1), 'Mon, 02 Jan 2006 15:04:05 -0700')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 31, 0])

    call cursor(1, 27)
    execute "normal 44\<C-X>"
    Assert Equals(getline(1), 'Mon, 02 Jan 2006 15:04:05 +0900')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 31, 0])
    execute "normal 44\<C-A>"
    Assert Equals(getline(1), 'Mon, 02 Jan 2006 15:04:05 -0700')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 31, 0])
  End

  It increments/decrements '%Y-%m-%dT%H:%M:%S%z'
    let b:flap.rules += [flap#datetime#rule('%Y-%m-%dT%H:%M:%S%z')]
    call setline(1, '2019-05-01T00:00:00+09:00')

    call cursor(1, 1)
    execute "normal 8\<C-A>"
    Assert Equals(getline(1), '2027-05-01T00:00:00+09:00')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 25, 0])
    execute "normal 2\<C-X>"
    Assert Equals(getline(1), '2025-05-01T00:00:00+09:00')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 25, 0])

    call cursor(1, 6)
    execute "normal 5\<C-A>"
    Assert Equals(getline(1), '2025-10-01T00:00:00+09:00')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 25, 0])
    execute "normal 6\<C-X>"
    Assert Equals(getline(1), '2025-04-01T00:00:00+09:00')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 25, 0])

    call cursor(1, 9)
    execute "normal 195\<C-A>"
    Assert Equals(getline(1), '2025-10-13T00:00:00+09:00')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 25, 0])
    execute "normal 183\<C-X>"
    Assert Equals(getline(1), '2025-04-13T00:00:00+09:00')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 25, 0])

    call cursor(1, 12)
    execute "normal 21\<C-A>"
    Assert Equals(getline(1), '2025-04-13T21:00:00+09:00')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 25, 0])
    execute "normal 12\<C-X>"
    Assert Equals(getline(1), '2025-04-13T09:00:00+09:00')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 25, 0])

    call cursor(1, 15)
    execute "normal 61\<C-A>"
    Assert Equals(getline(1), '2025-04-13T10:01:00+09:00')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 25, 0])
    execute "normal 62\<C-X>"
    Assert Equals(getline(1), '2025-04-13T08:59:00+09:00')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 25, 0])

    call cursor(1, 18)
    execute "normal 63\<C-A>"
    Assert Equals(getline(1), '2025-04-13T09:00:03+09:00')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 25, 0])
    execute "normal 3\<C-X>"
    Assert Equals(getline(1), '2025-04-13T09:00:00+09:00')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 25, 0])

    call cursor(1, 20)
    execute "normal 88\<C-A>"
    Assert Equals(getline(1), '2025-04-13T09:00:00+04:00')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 25, 0])
    execute "normal 88\<C-X>"
    Assert Equals(getline(1), '2025-04-13T09:00:00+09:00')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 25, 0])
  End

  It increments/decrements '%Y-%m-%d'
    let b:flap.rules += [flap#datetime#rule('%Y-%m-%d')]
    call setline(1, '2019-04-30')

    call cursor(1, 1)
    execute "normal 5\<C-A>"
    Assert Equals(getline(1), '2024-04-30')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 10, 0])
    execute "normal 3\<C-X>"
    Assert Equals(getline(1), '2021-04-30')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 10, 0])

    call cursor(1, 6)
    execute "normal 34\<C-A>"
    Assert Equals(getline(1), '2024-02-29')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 10, 0])
    execute "normal 36\<C-X>"
    Assert Equals(getline(1), '2021-02-28')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 10, 0])

    call cursor(1, 9)
    execute "normal 161\<C-A>"
    Assert Equals(getline(1), '2021-08-08')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 10, 0])
    execute "normal 16\<C-X>"
    Assert Equals(getline(1), '2021-07-23')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 10, 0])
  End

  It increments/decrements 'Windows 10 %y%m'
    let b:flap.rules += [flap#datetime#rule('Windows 10 %y%m')]
    call setline(1, 'Windows 10 1709')

    call cursor(1, 12)
    execute "normal 2\<C-A>"
    Assert Equals(getline(1), 'Windows 10 1909')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 15, 0])
    execute "normal \<C-X>"
    Assert Equals(getline(1), 'Windows 10 1809')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 15, 0])

    call cursor(1, 14)
    execute "normal 19\<C-A>"
    Assert Equals(getline(1), 'Windows 10 2004')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 15, 0])
    execute "normal 7\<C-X>"
    Assert Equals(getline(1), 'Windows 10 1909')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 15, 0])
  End

  It increments/decrements '%A'
    let b:flap.rules += [flap#datetime#rule('%A')]
    call setline(1, 'Wednesday')

    call cursor(1, 1)
    execute "normal 2\<C-A>"
    Assert Equals(getline(1), 'Friday')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 6, 0])
    execute "normal 3\<C-X>"
    Assert Equals(getline(1), 'Tuesday')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 7, 0])
  End

  It increments/decrements '%m/%d (%a)'
    let b:flap.rules += [flap#datetime#rule('%m/%d (%a)')]
    call setline(1, '05/01 (Wed)')

    call cursor(1, 8)
    execute "normal 2\<C-A>"
    Assert Equals(getline(1), '05/03 (Fri)')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 11, 0])
    execute "normal 3\<C-X>"
    Assert Equals(getline(1), '04/30 (Tue)')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 11, 0])
  End

  It increments/decrements '%H:%M:%S'
    let b:flap.rules += [flap#datetime#rule('%H:%M:%S')]
    call setline(1, '00:11:22')

    call cursor(1, 1)
    execute "normal 2\<C-A>"
    Assert Equals(getline(1), '02:11:22')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 8, 0])
    execute "normal 4\<C-X>"
    Assert Equals(getline(1), '22:11:22')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 8, 0])

    call cursor(1, 4)
    execute "normal 49\<C-A>"
    Assert Equals(getline(1), '23:00:22')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 8, 0])
    execute "normal 27\<C-X>"
    Assert Equals(getline(1), '22:33:22')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 8, 0])

    call cursor(1, 7)
    execute "normal 38\<C-A>"
    Assert Equals(getline(1), '22:34:00')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 8, 0])
    execute "normal 16\<C-X>"
    Assert Equals(getline(1), '22:33:44')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 8, 0])
  End

  It increments/decrements '%I:%M %p'
    let b:flap.rules += [flap#datetime#rule('%I:%M %p')]
    call setline(1, '03:00 PM')

    call cursor(1, 1)
    execute "normal 9\<C-A>"
    Assert Equals(getline(1), '12:00 AM')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 8, 0])
    execute "normal 12\<C-X>"
    Assert Equals(getline(1), '12:00 PM')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 8, 0])

    call cursor(1, 4)
    execute "normal 90\<C-A>"
    Assert Equals(getline(1), '01:30 PM')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 8, 0])
    execute "normal 40\<C-X>"
    Assert Equals(getline(1), '12:50 PM')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 8, 0])

    call cursor(1, 7)
    execute "normal 17\<C-A>"
    Assert Equals(getline(1), '05:50 AM')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 8, 0])
    execute "normal 3\<C-X>"
    Assert Equals(getline(1), '02:50 AM')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 8, 0])
  End

  It increments/decrements '%Y-%m-%dT%H:%M:%S%z'
    let b:flap.rules += [flap#datetime#rule('%Y-%m-%dT%H:%M:%S%z')]
    call setline(1, '1994-11-05T13:15:30Z')

    call cursor(1, 20)
    execute "normal 4\<C-A>"
    Assert Equals(getline(1), '1994-11-05T13:15:30+01:00')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 25, 0])
    execute "normal 4\<C-X>"
    Assert Equals(getline(1), '1994-11-05T13:15:30+00:00')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 25, 0])
  End

  It increments/decrements '%-Hh %% %0Mm %% %_Ss'
    let b:flap.rules += [flap#datetime#rule('%-Hh %% %0Mm %% %_Ss')]
    call setline(1, '00h % 00m % 00s')

    call cursor(1, 1)
    execute "normal 7\<C-A>"
    Assert Equals(getline(1), '7h % 00m %  0s')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 14, 0])
    execute "normal 19\<C-X>"
    Assert Equals(getline(1), '12h % 00m %  0s')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 15, 0])

    call cursor(1, 5)
    execute "normal 63\<C-A>"
    Assert Equals(getline(1), '13h % 03m %  0s')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 15, 0])
    execute "normal 30\<C-X>"
    Assert Equals(getline(1), '12h % 33m %  0s')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 15, 0])

    call cursor(1, 11)
    execute "normal 67\<C-A>"
    Assert Equals(getline(1), '12h % 34m %  7s')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 15, 0])
    execute "normal 46\<C-X>"
    Assert Equals(getline(1), '12h % 33m % 21s')
    Assert Equals(getpos("'["), [0, 1,  1, 0])
    Assert Equals(getpos("']"), [0, 1, 15, 0])
  End

  It throws an exception when the specified format is invalid
    Throws /^flap: datetime:.*'%!'$/ flap#datetime#rule('%!')
  End
End
