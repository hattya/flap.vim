function! s:time(rule, match, count) abort
  let t = split(a:match[0], ':')
  let i = col('.') <= 2 ? 0 : col('.') <= 4 ? 1 : 2
  let t[i] = str2nr(t[i]) + a:count
  return call('printf', ['%02d:%02d:%02d'] + t)
endfunction

let s:flap = {
\  'rules': [
\    ['foo', 'bar', 'baz'],
\    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
\    ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
\    [{'pattern': '\[''\(\k\+\)''\]', 'replace': '[''\1'']'},
\     {'pattern': '\["\(\k\+\)"\]',   'replace': '["\1"]'},
\     {'pattern': '\.\(\k\+\)',       'replace': '.\1'}],
\    [{'pattern': '[0-2]\d:[0-5]\d:[0-5]\d', 'replace': function('s:time')}],
\  ],
\}

Describe CTRL-A
  Before each
    new
    let b:flap = deepcopy(s:flap)
    nmap <buffer> <C-A> <Plug>(flap-inc)
    only!
  End

  It increments by a rule
    call setline(1, 'foo bar baz')

    call cursor(1, 1)
    execute "normal 2\<C-A>"
    Assert Equals(getline('.'), 'baz bar baz')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 3, 0])

    call cursor(1, 5)
    execute "normal 3\<C-A>"
    Assert Equals(getline('.'), 'baz bar baz')
    Assert Equals(getpos("'["), [0, 1, 5, 0])
    Assert Equals(getpos("']"), [0, 1, 7, 0])

    call cursor(1, 9)
    execute "normal \<C-A>"
    Assert Equals(getline('.'), 'baz bar foo')
    Assert Equals(getpos("'["), [0, 1,  9, 0])
    Assert Equals(getpos("']"), [0, 1, 11, 0])
  End

  It increments by a nearest rule
    let b:flap.rules[0] += ['foobaz']
    call insert(b:flap.rules, ['foobar'])
    call setline(1, 'foobar')

    call cursor(1, 4)
    execute "normal \<C-A>"
    Assert Equals(getline('.'), 'foobaz')
    Assert Equals(getpos("'["), [0, 1, 4, 0])
    Assert Equals(getpos("']"), [0, 1, 6, 0])

    call cursor(1, 4)
    execute "normal 3\<C-A>"
    Assert Equals(getline('.'), 'foobar')
    Assert Equals(getpos("'["), [0, 1, 4, 0])
    Assert Equals(getpos("']"), [0, 1, 6, 0])
  End

  It increments by a shortest rule
    call setline(1, 'Monday')

    call cursor(1, 1)
    execute "normal 6\<C-A>"
    Assert Equals(getline('.'), 'Sunday')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 3, 0])

    call cursor(1, 4)
    execute "normal 2\<C-A>"
    Assert Equals(getline('.'), 'Tuesday')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 7, 0])
  End

  It increments by a regexp rule
    call setline(1, "echo dict['key']")

    call cursor(1, 10)
    execute "normal 2\<C-A>"
    Assert Equals(getline('.'), 'echo dict.key')
    Assert Equals(getpos("'["), [0, 1, 10, 0])
    Assert Equals(getpos("']"), [0, 1, 13, 0])

    execute "normal 5\<C-A>"
    Assert Equals(getline('.'), 'echo dict["key"]')
    Assert Equals(getpos("'["), [0, 1, 10, 0])
    Assert Equals(getpos("']"), [0, 1, 16, 0])
  End

  It increments by a funcref rule
    call setline(1, '00:00:00')

    call cursor(1, 1)
    execute "normal \<C-A>"
    Assert Equals(getline('.'), '01:00:00')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 8, 0])

    call cursor(1, 4)
    execute "normal 22\<C-A>"
    Assert Equals(getline('.'), '01:22:00')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 8, 0])

    call cursor(1, 7)
    execute "normal 10\<C-A>"
    Assert Equals(getline('.'), '01:22:10')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 8, 0])
  End

  It falls back to default
    call setline(1, '1')

    call cursor(1, 1)
    execute "normal \<C-A>"
    Assert Equals(getline('.'), '2')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 1, 0])
  End

  It throws an exception when a rule is invalid
    let b:flap.rules += [[0]]

    Throws /^invalid rule: / :execute "normal \<C-A>"
  End
End

Describe {Visual}CTRL-A
  Before each
    new
    let b:flap = deepcopy(s:flap)
    vmap <buffer> <C-A> <Plug>(flap-inc)
    only!
  End

  It increments by a rule in v
    call setline(1, 'bar foo baz')
    call setline(2, '  0   3   3')
    call setline(3, 'Thu Mon Tue')

    call cursor(1, 1)
    execute "normal vG$\<C-A>"
    Assert Equals(getline(1), 'baz foo baz')
    Assert Equals(getline(2), '  1   3   3')
    Assert Equals(getline(3), 'Fri Mon Tue')
    Assert Equals(getpos('.'),  [0, 1, 1, 0])
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 3, 3, 0])

    call cursor(1, 5)
    execute "normal vG$\<C-A>"
    Assert Equals(getline(1), 'baz bar baz')
    Assert Equals(getline(2), '  2   3   3')
    Assert Equals(getline(3), 'Sat Mon Tue')
    Assert Equals(getpos('.'),  [0, 1, 5, 0])
    Assert Equals(getpos("'["), [0, 1, 5, 0])
    Assert Equals(getpos("']"), [0, 3, 3, 0])

    call cursor(1, 9)
    execute "normal vG$\<C-A>"
    Assert Equals(getline(1), 'baz bar foo')
    Assert Equals(getline(2), '  3   3   3')
    Assert Equals(getline(3), 'Sun Mon Tue')
    Assert Equals(getpos('.'),  [0, 1, 9, 0])
    Assert Equals(getpos("'["), [0, 1, 9, 0])
    Assert Equals(getpos("']"), [0, 3, 3, 0])
  End

  It increments by a rule in V
    call setline(1, 'baz bar foo')
    call setline(2, '  0   3   3')
    call setline(3, 'Thu Mon Tue')

    call cursor(1, 1)
    execute "normal VG\<C-A>"
    Assert Equals(getline(1), 'foo bar foo')
    Assert Equals(getline(2), '  1   3   3')
    Assert Equals(getline(3), 'Fri Mon Tue')
    Assert Equals(getpos('.'),  [0, 1, 1, 0])
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 3, 3, 0])

    call cursor(1, 5)
    execute "normal VG\<C-A>"
    Assert Equals(getline(1), 'bar bar foo')
    Assert Equals(getline(2), '  2   3   3')
    Assert Equals(getline(3), 'Sat Mon Tue')
    Assert Equals(getpos('.'),  [0, 1, 1, 0])
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 3, 3, 0])

    call cursor(1, 9)
    execute "normal VG\<C-A>"
    Assert Equals(getline(1), 'baz bar foo')
    Assert Equals(getline(2), '  3   3   3')
    Assert Equals(getline(3), 'Sun Mon Tue')
    Assert Equals(getpos('.'),  [0, 1, 1, 0])
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 3, 3, 0])
  End

  It increments by a rule in CTRL-V
    call setline(1, 'foo bar baz')
    call setline(2, '  1   0   2')
    call setline(3, 'Fri Fri Mon')

    call cursor(1, 1)
    execute "normal \<C-V>2l2j2\<C-A>"
    Assert Equals(getline(1), 'baz bar baz')
    Assert Equals(getline(2), '  3   0   2')
    Assert Equals(getline(3), 'Sun Fri Mon')
    Assert Equals(getpos('.'),  [0, 1, 1, 0])
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 3, 3, 0])

    call cursor(1, 5)
    execute "normal \<C-V>2l2j3\<C-A>"
    Assert Equals(getline(1), 'baz bar baz')
    Assert Equals(getline(2), '  3   3   2')
    Assert Equals(getline(3), 'Sun Mon Mon')
    Assert Equals(getpos('.'),  [0, 1, 5, 0])
    Assert Equals(getpos("'["), [0, 1, 5, 0])
    Assert Equals(getpos("']"), [0, 3, 7, 0])

    call cursor(1, 9)
    execute "normal \<C-V>2l2j\<C-A>"
    Assert Equals(getline(1), 'baz bar foo')
    Assert Equals(getline(2), '  3   3   3')
    Assert Equals(getline(3), 'Sun Mon Tue')
    Assert Equals(getpos('.'),  [0, 1,  9, 0])
    Assert Equals(getpos("'["), [0, 1,  9, 0])
    Assert Equals(getpos("']"), [0, 3, 11, 0])
  End

  It increments by a shortest rule in v
    call setline(1, repeat(['Monday'], 3))

    call cursor(2, 1)
    execute "normal v$6\<C-A>"
    Assert Equals(getline(1, '$'), ['Monday', 'Sunday', 'Monday'])
    Assert Equals(getpos('.'),  [0, 2, 1, 0])
    Assert Equals(getpos("'["), [0, 2, 1, 0])
    Assert Equals(getpos("']"), [0, 2, 3, 0])

    try
      set selection=exclusive
      call cursor(2, 1)
      execute "normal v\<C-A>v$2\<C-A>"
    finally
      set selection&vim
    endtry
    Assert Equals(getline(1, '$'), ['Monday', 'Tueday', 'Monday'])
    Assert Equals(getpos('.'),  [0, 2, 1, 0])
    Assert Equals(getpos("'["), [0, 2, 1, 0])
    Assert Equals(getpos("']"), [0, 2, 3, 0])
  End

  It increments by a shortest rule in V
    call setline(1, repeat(['Monday'], 3))

    call cursor(2, 1)
    execute "normal V$\<C-A>"
    Assert Equals(getline(1, '$'), ['Monday', 'Tueday', 'Monday'])
    Assert Equals(getpos('.'),  [0, 2, 1, 0])
    Assert Equals(getpos("'["), [0, 2, 1, 0])
    Assert Equals(getpos("']"), [0, 2, 3, 0])
  End

  It increments by a longest rule in CTRL-V
    call setline(1, repeat(['Monday'], 3))

    call cursor(2, 1)
    execute "normal \<C-V>2l6\<C-A>"
    Assert Equals(getline(1, '$'), ['Monday', 'Sunday', 'Monday'])
    Assert Equals(getpos('.'),  [0, 2, 1, 0])
    Assert Equals(getpos("'["), [0, 2, 1, 0])
    Assert Equals(getpos("']"), [0, 2, 3, 0])

    try
      set selection=exclusive
      call cursor(2, 1)
      execute "normal \<C-V>\<C-A>\<C-V>$2\<C-A>"
    finally
      set selection&vim
    endtry
    Assert Equals(getline(1, '$'), ['Monday', 'Tuesday', 'Monday'])
    Assert Equals(getpos('.'),  [0, 2, 1, 0])
    Assert Equals(getpos("'["), [0, 2, 1, 0])
    Assert Equals(getpos("']"), [0, 2, 7, 0])
  End

  It keeps '] as-is in v
    call setline(1, 'foo bar baz')
    call setline(2, '  1010101  ')

    call cursor(1, 5)
    execute "normal vG$\<C-A>"
    Assert Equals(getline(1), 'foo baz baz')
    Assert Equals(getline(2), '  1010102  ')
    Assert Equals(getpos('.'),  [0, 1, 5, 0])
    Assert Equals(getpos("'["), [0, 1, 5, 0])
    Assert Equals(getpos("']"), [0, 2, 9, 0])
  End

  It keeps '] as-is in V
    call setline(1, 'foo bar baz')
    call setline(2, '  1010101  ')

    call cursor(1, 5)
    execute "normal VG\<C-A>"
    Assert Equals(getline(1), 'bar bar baz')
    Assert Equals(getline(2), '  1010102  ')
    Assert Equals(getpos('.'),  [0, 1, 1, 0])
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 2, 9, 0])
  End

  It keeps '] as-is in CTRL-V
    call setline(1, 'foo bar baz')
    call setline(2, '  1010101  ')

    call cursor(1, 5)
    execute "normal \<C-V>2lj\<C-A>"
    Assert Equals(getline(1), 'foo baz baz')
    Assert Equals(getline(2), '  1010201  ')
    Assert Equals(getpos('.'),  [0, 1, 5, 0])
    Assert Equals(getpos("'["), [0, 1, 5, 0])
    Assert Equals(getpos("']"), [0, 2, 7, 0])
  End
End

Describe {Visual}g CTRL-A
  Before each
    new
    let b:flap = deepcopy(s:flap)
    vmap <buffer> g<C-A> <Plug>(flap-inc-g)
    only!
  End

  It increments by a rule in v
    call setline(1, ['foo', '', '1', '', 'Sun'])

    call cursor(1, 1)
    execute "normal vG$g\<C-A>"
    Assert Equals(getline(1, '$'), ['bar', '', '3', '', 'Wed'])
    Assert Equals(getpos('.'),  [0, 1, 1, 0])
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 5, 3, 0])
    Assert Equals(visualmode(), 'v')
    Assert Equals(getpos("'<"), [0, 1, 1, 0])
    Assert Equals(getpos("'>"), [0, 5, 4, 0])
  End

  It increments by a rule in V
    call setline(1, ['foo', '', '1', '', 'Sun'])

    call cursor(1, 1)
    execute "normal VGg\<C-A>"
    Assert Equals(getline(1, '$'), ['bar', '', '3', '', 'Wed'])
    Assert Equals(getpos('.'),  [0, 1, 1, 0])
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 5, 3, 0])
    Assert Equals(visualmode(), 'V')
    Assert Equals(getpos("'<"), [0, 1, 1, 0])
    Assert Equals(getpos("'>")[:1],   [0, 5])
  End

  It increments by a rule in CTRL-V
    call setline(1, ['foo', '', '1', '', 'Sun'])

    call cursor(1, 1)
    execute "normal \<C-V>G$g\<C-A>"
    Assert Equals(getline(1, '$'), ['bar', '', '3', '', 'Wed'])
    Assert Equals(getpos('.'),  [0, 1, 1, 0])
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 5, 3, 0])
    Assert Equals(visualmode(), "\<C-V>")
    Assert Equals(getpos("'<"), [0, 1, 1, 0])
    Assert Equals(getpos("'>"), [0, 5, 4, 0])
  End
End

Describe CTRL-X
  Before each
    new
    let b:flap = deepcopy(s:flap)
    nmap <buffer> <C-X> <Plug>(flap-dec)
    only!
  End

  It decrements by a rule
    call setline(1, 'foo bar baz')

    call cursor(1, 1)
    execute "normal \<C-X>"
    Assert Equals(getline('.'), 'baz bar baz')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 3, 0])

    call cursor(1, 5)
    execute "normal 3\<C-X>"
    Assert Equals(getline('.'), 'baz bar baz')
    Assert Equals(getpos("'["), [0, 1, 5, 0])
    Assert Equals(getpos("']"), [0, 1, 7, 0])

    call cursor(1, 9)
    execute "normal 2\<C-X>"
    Assert Equals(getline('.'), 'baz bar foo')
    Assert Equals(getpos("'["), [0, 1,  9, 0])
    Assert Equals(getpos("']"), [0, 1, 11, 0])
  End

  It decrements by a nearest rule
    let b:flap.rules[0] += ['foobaz']
    call insert(b:flap.rules, ['foobar'])
    call setline(1, 'foobar')

    call cursor(1, 4)
    execute "normal 3\<C-X>"
    Assert Equals(getline('.'), 'foobaz')
    Assert Equals(getpos("'["), [0, 1, 4, 0])
    Assert Equals(getpos("']"), [0, 1, 6, 0])

    call cursor(1, 4)
    execute "normal \<C-X>"
    Assert Equals(getline('.'), 'foobar')
    Assert Equals(getpos("'["), [0, 1, 4, 0])
    Assert Equals(getpos("']"), [0, 1, 6, 0])
  End

  It decrements by a shortest rule
    call setline(1, 'Monday')

    call cursor(1, 1)
    execute "normal \<C-X>"
    Assert Equals(getline('.'), 'Sunday')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 3, 0])

    call cursor(1, 4)
    execute "normal 5\<C-X>"
    Assert Equals(getline('.'), 'Tuesday')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 7, 0])
  End

  It decrements by a regexp rule
    call setline(1, "echo dict['key']")

    call cursor(1, 10)
    execute "normal 4\<C-X>"
    Assert Equals(getline('.'), 'echo dict.key')
    Assert Equals(getpos("'["), [0, 1, 10, 0])
    Assert Equals(getpos("']"), [0, 1, 13, 0])

    execute "normal \<C-X>"
    Assert Equals(getline('.'), 'echo dict["key"]')
    Assert Equals(getpos("'["), [0, 1, 10, 0])
    Assert Equals(getpos("']"), [0, 1, 16, 0])
  End

  It decrements by a funcref rule
    call setline(1, '23:59:59')

    call cursor(1, 1)
    execute "normal 22\<C-X>"
    Assert Equals(getline('.'), '01:59:59')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 8, 0])

    call cursor(1, 4)
    execute "normal 37\<C-X>"
    Assert Equals(getline('.'), '01:22:59')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 8, 0])

    call cursor(1, 7)
    execute "normal 49\<C-X>"
    Assert Equals(getline('.'), '01:22:10')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 8, 0])
  End

  It falls back to default
    call setline(1, '3')

    call cursor(1, 1)
    execute "normal \<C-X>"
    Assert Equals(getline('.'), '2')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 1, 0])
  End

  It throws an exception when a rule is invalid
    let b:flap.rules += [[0]]

    Throws /^invalid rule: / :execute "normal \<C-X>"
  End
End

Describe {Visual}CTRL-X
  Before each
    new
    let b:flap = deepcopy(s:flap)
    vmap <buffer> <C-X> <Plug>(flap-dec)
    only!
  End

  It decrements by a rule in v
    call setline(1, 'foo baz bar')
    call setline(2, '  6   2   1')
    call setline(3, 'Wed Mon Tue')

    call cursor(1, 1)
    execute "normal vG$\<C-X>"
    Assert Equals(getline(1), 'baz baz bar')
    Assert Equals(getline(2), '  5   2   1')
    Assert Equals(getline(3), 'Tue Mon Tue')
    Assert Equals(getpos('.'),  [0, 1, 1, 0])
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 3, 3, 0])

    call cursor(1, 5)
    execute "normal vG$\<C-X>"
    Assert Equals(getline(1), 'baz bar bar')
    Assert Equals(getline(2), '  4   2   1')
    Assert Equals(getline(3), 'Mon Mon Tue')
    Assert Equals(getpos('.'),  [0, 1, 5, 0])
    Assert Equals(getpos("'["), [0, 1, 5, 0])
    Assert Equals(getpos("']"), [0, 3, 3, 0])

    call cursor(1, 9)
    execute "normal vG$\<C-X>"
    Assert Equals(getline(1), 'baz bar foo')
    Assert Equals(getline(2), '  3   2   1')
    Assert Equals(getline(3), 'Sun Mon Tue')
    Assert Equals(getpos('.'),  [0, 1, 9, 0])
    Assert Equals(getpos("'["), [0, 1, 9, 0])
    Assert Equals(getpos("']"), [0, 3, 3, 0])
  End

  It decrements by a rule in V
    call setline(1, 'foo bar baz')
    call setline(2, '  6   2   1')
    call setline(3, 'Wed Mon Tue')

    call cursor(1, 1)
    execute "normal VG\<C-X>"
    Assert Equals(getline(1), 'baz bar baz')
    Assert Equals(getline(2), '  5   2   1')
    Assert Equals(getline(3), 'Tue Mon Tue')
    Assert Equals(getpos('.'),  [0, 1, 1, 0])
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 3, 3, 0])

    call cursor(1, 5)
    execute "normal VG\<C-X>"
    Assert Equals(getline(1), 'bar bar baz')
    Assert Equals(getline(2), '  4   2   1')
    Assert Equals(getline(3), 'Mon Mon Tue')
    Assert Equals(getpos('.'),  [0, 1, 1, 0])
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 3, 3, 0])

    call cursor(1, 9)
    execute "normal VG\<C-X>"
    Assert Equals(getline(1), 'foo bar baz')
    Assert Equals(getline(2), '  3   2   1')
    Assert Equals(getline(3), 'Sun Mon Tue')
    Assert Equals(getpos('.'),  [0, 1, 1, 0])
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 3, 3, 0])
  End

  It decrements by a rule in CTRL-V
    call setline(1, 'foo bar baz')
    call setline(2, '  1   3   2')
    call setline(3, 'Mon Thu Thu')

    call cursor(1, 1)
    execute "normal \<C-V>2l2j\<C-X>"
    Assert Equals(getline(1), 'baz bar baz')
    Assert Equals(getline(2), '  0   3   2')
    Assert Equals(getline(3), 'Sun Thu Thu')
    Assert Equals(getpos('.'),  [0, 1, 1, 0])
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 3, 3, 0])

    call cursor(1, 5)
    execute "normal \<C-V>2l2j3\<C-X>"
    Assert Equals(getline(1), 'baz bar baz')
    Assert Equals(getline(2), '  0   0   2')
    Assert Equals(getline(3), 'Sun Mon Thu')
    Assert Equals(getpos('.'),  [0, 1, 5, 0])
    Assert Equals(getpos("'["), [0, 1, 5, 0])
    Assert Equals(getpos("']"), [0, 3, 7, 0])

    call cursor(1, 9)
    execute "normal \<C-V>2l2j2\<C-X>"
    Assert Equals(getline(1), 'baz bar foo')
    Assert Equals(getline(2), '  0   0   0')
    Assert Equals(getline(3), 'Sun Mon Tue')
    Assert Equals(getpos('.'),  [0, 1,  9, 0])
    Assert Equals(getpos("'["), [0, 1,  9, 0])
    Assert Equals(getpos("']"), [0, 3, 11, 0])
  End

  It decrements by a shortest rule in v
    call setline(1, repeat(['Monday'], 3))

    call cursor(2, 1)
    execute "normal v$\<C-X>"
    Assert Equals(getline(1, '$'), ['Monday', 'Sunday', 'Monday'])
    Assert Equals(getpos('.'),  [0, 2, 1, 0])
    Assert Equals(getpos("'["), [0, 2, 1, 0])
    Assert Equals(getpos("']"), [0, 2, 3, 0])

    try
      set selection=exclusive
      call cursor(2, 1)
      execute "normal v\<C-X>v$5\<C-X>"
    finally
      set selection&vim
    endtry
    Assert Equals(getline(1, '$'), ['Monday', 'Tueday', 'Monday'])
    Assert Equals(getpos('.'),  [0, 2, 1, 0])
    Assert Equals(getpos("'["), [0, 2, 1, 0])
    Assert Equals(getpos("']"), [0, 2, 3, 0])
  End

  It decrements by a shortest rule in V
    call setline(1, repeat(['Monday'], 3))

    call cursor(2, 1)
    execute "normal V$6\<C-X>"
    Assert Equals(getline(1, '$'), ['Monday', 'Tueday', 'Monday'])
    Assert Equals(getpos('.'),  [0, 2, 1, 0])
    Assert Equals(getpos("'["), [0, 2, 1, 0])
    Assert Equals(getpos("']"), [0, 2, 3, 0])
  End

  It decrements by a longest rule in CTRL-V
    call setline(1, repeat(['Monday'], 3))

    call cursor(2, 1)
    execute "normal \<C-V>2l\<C-X>"
    Assert Equals(getline(1, '$'), ['Monday', 'Sunday', 'Monday'])
    Assert Equals(getpos('.'),  [0, 2, 1, 0])
    Assert Equals(getpos("'["), [0, 2, 1, 0])
    Assert Equals(getpos("']"), [0, 2, 3, 0])

    try
      set selection=exclusive
      call cursor(2, 1)
      execute "normal \<C-V>\<C-X>\<C-V>$5\<C-X>"
    finally
      set selection&vim
    endtry
    Assert Equals(getline(1, '$'), ['Monday', 'Tuesday', 'Monday'])
    Assert Equals(getpos('.'),  [0, 2, 1, 0])
    Assert Equals(getpos("'["), [0, 2, 1, 0])
    Assert Equals(getpos("']"), [0, 2, 7, 0])
  End

  It keeps '] as-is in v
    call setline(1, 'foo bar baz')
    call setline(2, '  1010101  ')

    call cursor(1, 5)
    execute "normal vG$\<C-X>"
    Assert Equals(getline(1), 'foo foo baz')
    Assert Equals(getline(2), '  1010100  ')
    Assert Equals(getpos('.'),  [0, 1, 5, 0])
    Assert Equals(getpos("'["), [0, 1, 5, 0])
    Assert Equals(getpos("']"), [0, 2, 9, 0])
  End

  It keeps '] as-is in V
    call setline(1, 'foo bar baz')
    call setline(2, '  1010101  ')

    call cursor(1, 5)
    execute "normal VG\<C-X>"
    Assert Equals(getline(1), 'baz bar baz')
    Assert Equals(getline(2), '  1010100  ')
    Assert Equals(getpos('.'),  [0, 1, 1, 0])
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 2, 9, 0])
  End

  It keeps '] as-is in CTRL-V
    call setline(1, 'foo bar baz')
    call setline(2, '  1010101  ')

    call cursor(1, 5)
    execute "normal \<C-V>2lj\<C-X>"
    Assert Equals(getline(1), 'foo foo baz')
    Assert Equals(getline(2), '  1010001  ')
    Assert Equals(getpos('.'),  [0, 1, 5, 0])
    Assert Equals(getpos("'["), [0, 1, 5, 0])
    Assert Equals(getpos("']"), [0, 2, 7, 0])
  End
End

Describe {Visual}g CTRL-X
  Before each
    new
    let b:flap = deepcopy(s:flap)
    vmap <buffer> g<C-X> <Plug>(flap-dec-g)
    only!
  End

  It decrements by a rule in v
    call setline(1, ['baz', '', '5', '', 'Sat'])

    call cursor(1, 1)
    execute "normal vG$g\<C-X>"
    Assert Equals(getline(1, '$'), ['bar', '', '3', '', 'Wed'])
    Assert Equals(getpos('.'),  [0, 1, 1, 0])
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 5, 3, 0])
    Assert Equals(visualmode(), 'v')
    Assert Equals(getpos("'<"), [0, 1, 1, 0])
    Assert Equals(getpos("'>"), [0, 5, 4, 0])
  End

  It decrements by a rule in V
    call setline(1, ['baz', '', '5', '', 'Sat'])

    call cursor(1, 1)
    execute "normal VGg\<C-X>"
    Assert Equals(getline(1, '$'), ['bar', '', '3', '', 'Wed'])
    Assert Equals(getpos('.'),  [0, 1, 1, 0])
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 5, 3, 0])
    Assert Equals(visualmode(), 'V')
    Assert Equals(getpos("'<"), [0, 1, 1, 0])
    Assert Equals(getpos("'>")[:1],   [0, 5])
  End

  It decrements by a rule in CTRL-V
    call setline(1, ['baz', '', '5', '', 'Sat'])

    call cursor(1, 1)
    execute "normal \<C-V>G$g\<C-X>"
    Assert Equals(getline(1, '$'), ['bar', '', '3', '', 'Wed'])
    Assert Equals(getpos('.'),  [0, 1, 1, 0])
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 5, 3, 0])
    Assert Equals(visualmode(), "\<C-V>")
    Assert Equals(getpos("'<"), [0, 1, 1, 0])
    Assert Equals(getpos("'>"), [0, 5, 4, 0])
  End
End
