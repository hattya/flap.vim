let s:flap = {
\  'rules': [
\    ['foo', 'bar', 'baz'],
\    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
\    ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
\  ],
\}

Describe CTRL-A
  Before each
    new
    let b:flap = deepcopy(s:flap)
    nmap <buffer> <C-A> <Plug>(flap-inc)
    only!
  End

  It increments by a rule
    call setline(1, 'foo bar baz')

    call cursor(1, 1)
    execute "normal 2\<C-A>"
    Assert Equals(getline('.'), 'baz bar baz')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 3, 0])

    call cursor(1, 5)
    execute "normal 3\<C-A>"
    Assert Equals(getline('.'), 'baz bar baz')
    Assert Equals(getpos("'["), [0, 1, 5, 0])
    Assert Equals(getpos("']"), [0, 1, 7, 0])

    call cursor(1, 9)
    execute "normal \<C-A>"
    Assert Equals(getline('.'), 'baz bar foo')
    Assert Equals(getpos("'["), [0, 1,  9, 0])
    Assert Equals(getpos("']"), [0, 1, 11, 0])
  End

  It increments by a nearest rule
    let b:flap.rules[0] += ['foobaz']
    call insert(b:flap.rules, ['foobar'])
    call setline(1, 'foobar')

    call cursor(1, 4)
    execute "normal \<C-A>"
    Assert Equals(getline('.'), 'foobaz')
    Assert Equals(getpos("'["), [0, 1, 4, 0])
    Assert Equals(getpos("']"), [0, 1, 6, 0])

    call cursor(1, 4)
    execute "normal 3\<C-A>"
    Assert Equals(getline('.'), 'foobar')
    Assert Equals(getpos("'["), [0, 1, 4, 0])
    Assert Equals(getpos("']"), [0, 1, 6, 0])
  End

  It increments by a shortest rule
    call setline(1, 'Monday')

    call cursor(1, 1)
    execute "normal 6\<C-A>"
    Assert Equals(getline('.'), 'Sunday')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 3, 0])

    call cursor(1, 4)
    execute "normal 2\<C-A>"
    Assert Equals(getline('.'), 'Tuesday')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 7, 0])
  End

  It falls back to default
    call setline(1, '1')

    call cursor(1, 1)
    execute "normal \<C-A>"
    Assert Equals(getline('.'), '2')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 1, 0])
  End

  It throws an exception when a rule is invalid
    let b:flap.rules += [[0]]

    Throws /^invalid rule: / :execute "normal \<C-A>"
  End
End

Describe CTRL-X
  Before each
    new
    let b:flap = deepcopy(s:flap)
    nmap <buffer> <C-X> <Plug>(flap-dec)
    only!
  End

  It decrements by a rule
    call setline(1, 'foo bar baz')

    call cursor(1, 1)
    execute "normal \<C-X>"
    Assert Equals(getline('.'), 'baz bar baz')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 3, 0])

    call cursor(1, 5)
    execute "normal 3\<C-X>"
    Assert Equals(getline('.'), 'baz bar baz')
    Assert Equals(getpos("'["), [0, 1, 5, 0])
    Assert Equals(getpos("']"), [0, 1, 7, 0])

    call cursor(1, 9)
    execute "normal 2\<C-X>"
    Assert Equals(getline('.'), 'baz bar foo')
    Assert Equals(getpos("'["), [0, 1,  9, 0])
    Assert Equals(getpos("']"), [0, 1, 11, 0])
  End

  It decrements by a nearest rule
    let b:flap.rules[0] += ['foobaz']
    call insert(b:flap.rules, ['foobar'])
    call setline(1, 'foobar')

    call cursor(1, 4)
    execute "normal 3\<C-X>"
    Assert Equals(getline('.'), 'foobaz')
    Assert Equals(getpos("'["), [0, 1, 4, 0])
    Assert Equals(getpos("']"), [0, 1, 6, 0])

    call cursor(1, 4)
    execute "normal \<C-X>"
    Assert Equals(getline('.'), 'foobar')
    Assert Equals(getpos("'["), [0, 1, 4, 0])
    Assert Equals(getpos("']"), [0, 1, 6, 0])
  End

  It decrements by a shortest rule
    call setline(1, 'Monday')

    call cursor(1, 1)
    execute "normal \<C-X>"
    Assert Equals(getline('.'), 'Sunday')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 3, 0])

    call cursor(1, 4)
    execute "normal 5\<C-X>"
    Assert Equals(getline('.'), 'Tuesday')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 7, 0])
  End

  It falls back to default
    call setline(1, '3')

    call cursor(1, 1)
    execute "normal \<C-X>"
    Assert Equals(getline('.'), '2')
    Assert Equals(getpos("'["), [0, 1, 1, 0])
    Assert Equals(getpos("']"), [0, 1, 1, 0])
  End

  It throws an exception when a rule is invalid
    let b:flap.rules += [[0]]

    Throws /^invalid rule: / :execute "normal \<C-X>"
  End
End
